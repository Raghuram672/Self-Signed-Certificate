openssl genpkey -algorithm RSA -out rootCA.key -aes256
openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 3650 -out rootCA.pem
openssl genpkey -algorithm RSA -out server.key


------------------SAN_CONFIG---------------------------------

[ req ]
default_bits       = 2048
default_keyfile    = server.key
distinguished_name = req_distinguished_name
req_extensions     = req_ext   # This line references req_ext for SANs

[ req_distinguished_name ]
countryName                 = Country Name (2 letter code)
countryName_default         = US
stateOrProvinceName         = State or Province Name (full name)
localityName                = Locality Name (e.g., city)
organizationalUnitName      = Organizational Unit Name (e.g., section)
commonName                  = Common Name (e.g., server FQDN or YOUR name)

[ req_ext ]
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = localhost


openssl req -new -key server.key -out server.csr -config openssl.cnf
openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out server.crt -days 365 -sha256 -extensions req_ext -extfile openssl.cnf


-----------------------------Nodejs Server----------------------------------
const https = require('https');
const fs = require('fs');

// Load the certificate and key files
const options = {
    key: fs.readFileSync('server.key'),
    cert: fs.readFileSync('server.crt')
};

// Create an HTTPS server that responds with "Hello, World!"
https.createServer(options, (req, res) => {
    res.writeHead(200);
    res.end('Hello, World!');
}).listen(3000, () => {
    console.log('Server is running on https://localhost:3000');
});



curl -v --cacert rootCA.pem https://localhost:3000

